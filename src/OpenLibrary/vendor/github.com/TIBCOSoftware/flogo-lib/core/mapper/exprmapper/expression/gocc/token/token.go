// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"function_name",
		"(",
		")",
		"()",
		"delimitor_param",
		"doublequotes_string",
		"singlequote_string",
		"number",
		"argument",
		"true",
		"false",
		"float",
		"operator_charactor",
		"?",
		":",
	},

	idMap: map[string]Type{
		"INVALID":             0,
		"$":                   1,
		"function_name":       2,
		"(":                   3,
		")":                   4,
		"()":                  5,
		"delimitor_param":     6,
		"doublequotes_string": 7,
		"singlequote_string":  8,
		"number":              9,
		"argument":            10,
		"true":                11,
		"false":               12,
		"float":               13,
		"operator_charactor":  14,
		"?":                   15,
		":":                   16,
	},
}
